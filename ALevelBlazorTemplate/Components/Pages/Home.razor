@page "/"
@using MyCheeseShop.Components.Shared
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@inject CheeseProvider CheeseProvider
@inject ShoppingCart ShoppingCart
@inject NavigationManager NavigationManager



<PageTitle>Home</PageTitle>




<style>
    .switch {
        display: inline-block;
        margin-right: 10px; /* Adjust margin as needed */
    }
</style>

@for (int x = 1; x < 4; x++)
{
    <label class="switch">
        <input type="checkbox" checked="checked">
        <div class="button">
            <div class="light"></div>
            <div class="dots"></div>
            <div class="characters"></div>
            <div class="shine"></div>
            <div class="shadow"></div>
        </div>
    </label>
}


@for (int x = 1; x < 6; x++)
{
    <label class="switch">
        <input type="checkbox" checked="checked">
        <div class="button">
            <div class="light"></div>
            <div class="dots"></div>
            <div class="characters"></div>
            <div class="shine"></div>
            <div class="shadow"></div>
        </div>
    </label>
}

<br />


@if (cheeses is null)
{
    <p>Loading...</p>
}
else if (!cheeses.Any())
{
    <p>No Cheeses Found</p>
}




<div class="sticky-top">
    <div class="d-flex justify-content-end mt-2 mt-md-0">
        <a @onclick="GoToCart" class="btn btn-outline-primary btn-light">🛒 Cart (@ShoppingCart.Count())</a>
    </div>
</div>



<div class="row row-cols-1 row-cols-md-4 g-4">

    @foreach (var cheese in FilteredCheeses)
    {
        <div class="col">
            <StoreItem Cheese="cheese" />
        </div>
    }
    @if (!FilteredCheeses.Any())
    {
        <p>🙁 No cheeses found</p>
    }
</div>




<CheeseQuickGrid />







@code {
    int i = 0;

    private IEnumerable<Cheese> cheeses;
    private string searchTerm = "";


    private IEnumerable<Cheese> filteredCheeses;
    private IEnumerable<Cheese> FilteredCheeses
    {
        get
        {
            return filteredCheeses.Where(GetSearchCriteria);
        }
        set
        {
            filteredCheeses = value;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        cheeses = await CheeseProvider.GetAllCheesesAsync();
        filteredCheeses = cheeses;
        ShoppingCart.OnCartUpdated += StateHasChanged;
    }


    private bool GetSearchCriteria(Cheese cheese)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return cheese.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || cheese.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || cheese.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || cheese.Strength.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }

}

