@page "/checkout"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MyCheeseShop.Components.Shared
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@attribute [Authorize]
@inject UserProvider UserProvider
@inject OrderProvider OrderProvider
@inject ShoppingCart ShoppingCart
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore



<PageTitle>Checkout - EasyBriezy</PageTitle>

<div class="card" style="width: 18rem;">
    <div class="card-header">
        Delivery Details
    </div>
    <ul class="list-group list-group-flush">
        <li class="list-group-item">Name : @user.FirstName @user.LastName</li>
        <li class="list-group-item">Address : @user.Address</li>
        <li class="list-group-item">City : @user.City</li>
        <li class="list-group-item">Postcode : @user.PostCode</li>
    </ul>
    <div class="card-footer">
        Estimated Delivery Time : 2-3 Days
    </div>
</div>










@code {

    private User user;
    private PaymentDetails paymentDetails;
    private EditContext editContext;
    private bool isPaying;

    protected override async Task OnInitializedAsync()
    {
        paymentDetails = new PaymentDetails();
        editContext = new EditContext(paymentDetails);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;
    }

    private async Task MakePayment()
    {
        await SimulatePayment();

        await OrderProvider.CreateOrder(user, ShoppingCart.GetItems());
        ShoppingCart.Clear();
        NavigationManager.NavigateTo("/thank-you");
    }

    private async Task SimulatePayment()
    {
        isPaying = true;
        StateHasChanged();

        await Task.Delay(2000);

        isPaying = false;
        StateHasChanged();
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }

    
    private sealed class PaymentDetails
    {
        [Required]
        public string NameOnCard { get; set; }

        [Required]
        public string CardNumber { get; set; }

        [Required]
        public string ExpiryDate { get; set; }

        [Required]
        public string SecurityCode { get; set; }
    }



    private string GetFormattedName(User user)
    {
        return $"{user.FirstName} {user.LastName}";
    }

    private string GetFormattedAddress(User user)
    {
        return $"{user.Address}{Environment.NewLine}{user.City}{Environment.NewLine}{user.PostCode}";
    }


}